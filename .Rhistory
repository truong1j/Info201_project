sum2_solar = sum("Solar Thermal and Photovoltaic", na.rm = TRUE)) %>%
select(sum2_wind, sum2_hydro, sum2_solar)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" & ENERGY.SOURCE == "Hydroelectric Conventional" &
ENERGY.SOURCE == "Solar Thermal and Photovoltaic")
sum_current
View(sum_current)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == Wind & ENERGY.SOURCE == Hydroelectric Conventional &
ENERGY.SOURCE == Solar Thermal and Photovoltaic)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == Wind & ENERGY.SOURCE == Hydroelectric Conventional &
ENERGY.SOURCE == Solar Thermal and Photovoltaic)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" & ENERGY.SOURCE == "Hydroelectric Conventional" &
ENERGY.SOURCE == "Solar Thermal and Photovoltaic")
View(sum_current)
sum_current <- all_current %>%
filter("ENERGY.SOURCE" == "Wind" )
View(sum_current)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" )
View(sum_current)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" & ENERGY.SOURCE == "Hydroelectric Conventional" &
ENERGY.SOURCE == "Solar Thermal and Photovoltaic")
View(sum_current)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" | ENERGY.SOURCE == "Hydroelectric Conventional" |
ENERGY.SOURCE == "Solar Thermal and Photovoltaic")
View(sum_current)
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" | ENERGY.SOURCE == "Hydroelectric Conventional" |
ENERGY.SOURCE == "Solar Thermal and Photovoltaic") %>%
group_by(ENERGY.SOURCE) %>%
summarise(sum = sum(generation))
View(sum_current)
View(sum_potential)
View(sum_potential)
table_wind_potential <- ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum())
)
table_wind_potential <- ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum())
)
View(table_wind_potential)
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum())
)
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum)
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = "sum_wind" & "sum_hydro", y = 1)
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = "sum_wind", y = 1)
)
ggplot(sum_potential) +
geom_col(
mapping = aes(x = c(sum_wind, sum_hydro, sum_solar), y = 1)
)
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = 1
)
sum_potential <- all_potential %>%
summarize(sum_wind = sum(Wind, na.rm = TRUE),
sum_hydro = sum(`Hydroelectric Conventional`, na.rm = TRUE),
sum_solar = sum(`Solar Thermal and Photovoltaic`, na.rm = TRUE)) %>%
select(sum_wind, sum_hydro, sum_solar)
rownames(sum_potential)[rownames(sum_potential) == "1"] = “generation”
sum_potential <- all_potential %>%
summarize(sum_wind = sum(Wind, na.rm = TRUE),
sum_hydro = sum(`Hydroelectric Conventional`, na.rm = TRUE),
sum_solar = sum(`Solar Thermal and Photovoltaic`, na.rm = TRUE)) %>%
select(sum_wind, sum_hydro, sum_solar)
rownames(sum_potential)[rownames(sum_potential) == "1"] = "generation"
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
library(shiny)
library(dplyr)
library(ggplot2)
library(data.table)
librart(tidyr)
library(shiny)
library(dplyr)
library(ggplot2)
library(data.table)
library(tidyr)
runApp('~/Desktop/info201/info_project')
runApp('~/Desktop/info201/info_project')
runApp('~/Desktop/info201/info_project')
runApp('~/Desktop/info201/info_project')
setwd("~/Desktop/info201/info_project")
runApp()
runApp()
runApp()
runApp()
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum)
)
runApp()
runApp('~/Desktop/info201/Info201_project/comparison')
runApp('~/Desktop/info201/Info201_project/comparison')
runApp('~/Desktop/info201/Info201_project/comparison')
runApp('~/Desktop/info201/Info201_project/comparison')
runApp('~/Desktop/info201/Info201_project/comparison')
runApp('~/Desktop/info201/Info201_project/comparison')
runApp('~/Desktop/info201/Info201_project/comparison')
runApp('~/Desktop/info201/Info201_project/comparison')
setwd("~/Desktop/info201/Info201_project")
getwd
getwd()
runApp()
#plot for current
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum)
table + labs(title = "Current Energy Production",
x = "Types of Energy",
y = "Total production in MWH"
)
#plot for current
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum)
table + labs(title = "Current Energy Production",
x = "Types of Energy",
y = "Total production in MWH")
)
# resha
#plot for current
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum)
table + labs(title = "Current Energy Production",
x = "Types of Energy",
y = "Total production in MWH")
)
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum))
table + labs(title = "Current Energy Production",
x = "Types of Energy",
y = "Total production in MWH")
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum))
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = c(sum_wind, sum_hydro, sum_solar), y = generation)
)
# reshape the data potential
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = c(sum_wind, sum_hydro, sum_solar), y = "generation")
)
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = c(sum_wind, sum_hydro, sum_solar), y = generation)
)
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = c(sum_wind, sum_hydro, sum_solar), y = generation)
)
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = c(sum_wind, sum_hydro, sum_solar), y = c(32783975, 258929, 31344671))
)
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
#plot for potential
ggplot(sum_potential) +
geom_col(
mapping = aes(x = c(sum_wind, sum_hydro, sum_solar), y = c("32783975", "258929", "31344671"))
)
View(all_potential)
View(all_potential)
View(sum_current)
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
library(tidyr)
sum_potential %>%
gather(
sum_potential,
key = TYPE,
value = Generation
)
sumup_potential <- sum_potential %>%
gather(
sum_potential,
key = type,
value = generation
)
sumup_potential <- sum_potential %>%
spread(
sum_potential,
key = type,
value = generation
)
sumup_potential <- sum_potential %>%
spread(
sum_potential,
key = type,
value = generation
)
# reshape the data potential
sumup_potential <- sum_potential %>%
spread(
sum_potential,
type,
generation
)
#plo
# reshape the data potential
sumup_potential <- sum_potential %>%
spread(
sum_potential,
type,
generation
)
#plo
# reshape the data potential
sumup_potential <- sum_potential %>%
spread(
sum_potential,
type,
generation
)
#plo
sumup_potential <- sum_potential %>%
spread(
sum_potential,
type,
generation
)
runApp()
runApp()
View(potential_data)
View(potential_data)
runApp('~/Desktop/info201/master')
runApp()
runApp('~/Desktop/info201/master')
runApp('~/Desktop/info201/master')
View(potential_data)
View(potential_data)
energy_sources <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
View(energy_sources)
runApp('~/Desktop/info201/master')
setwd("~/Desktop/info201/Info201_project")
runApp('~/Desktop/info201/master')
runApp('master')
runApp('master')
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
annual_generation <- read.csv("dataset/annual_generation_state.csv",
header = TRUE,
stringsAsFactors = FALSE)
runApp('master')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
states <- read.csv("statelatlong.csv")
View(states)
View(states)
runApp()
runApp()
View(potential_data)
View(potential_data)
potential_data <- potential_data %>%
rename(
X = City
)
View(states)
View(states)
potential_data <- potential_data %>%
rename(
X = City
)
potential_data <- potential_data %>%
rename(
X,  City
)
state
potential_data <- potential_data %>%
rename(
X,  City
)
potential_data <- potential_data %>%
rename(
state = City
)
potential_data <- potential_data %>%
rename(
State = X
)
View(potential_data)
View(potential_data)
runApp()
runApp()
View(GWh)
GWh <- GWh %>%
group_by(State) %>%
summarize(most_produced = max(total)) %>%
filter(most_produced == max(most_produced)) %>%
select(State)
GWh <- subset(potential_data, select = c("State", "urbanUtilityScalePV_GWh", "ruralUtilityScalePV_GWh",
"rooftopPV_GWh", "CSP_GWh", "onshoreWind_GWh", "offshoreWind_GWh",
"biopowerSolid_GWh", "biopowerGaseous_GWh", "geothermalHydrothermal_GWh",
"EGSGeothermal_GWh", "hydropower_GWh"))
GWh <- GWh %>%
inner_join(states, by = "State")
View(GWh)
View(GWh)
View(states)
View(states)
potential_data <- potential_data %>%
rename(
State = X
)
states <- states %>%
rename(
State = City,
Abbrev = State
)
GWh <- subset(potential_data, select = c("State", "urbanUtilityScalePV_GWh", "ruralUtilityScalePV_GWh",
"rooftopPV_GWh", "CSP_GWh", "onshoreWind_GWh", "offshoreWind_GWh",
"biopowerSolid_GWh", "biopowerGaseous_GWh", "geothermalHydrothermal_GWh",
"EGSGeothermal_GWh", "hydropower_GWh"))
GWh <- GWh %>%
inner_join(states, by = "State")
View(GWh)
View(GWh)
runApp()
interactive_map
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude.x,
lng = GWh$Longitude.x,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
library(shiny)
library(dplyr)
library(ggplot2)
library(data.table)
library(tidyr)
library(leaflet)
library(htmltools)
library(plotly)
GWh$info <- paste0("State: ", GWh$State, "<br/>",
"Total Energy Produced: ", GWh$total, "GWh", "<br/>")
map_coloring <- colorFactor(topo.colors(3), GWh$total)
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude.x,
lng = GWh$Longitude.x,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude.x,
lng = GWh$Longitude.x,
na.rm = TRUE,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude,
lng = GWh$Longitude,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
runApp()
GWh$total <- rowSums(GWh[, 2:12], na.rm = TRUE)
GWh$info <- paste0("State: ", GWh$State, "<br/>",
"Total Energy Produced: ", GWh$total, "GWh", "<br/>")
map_coloring <- colorFactor(topo.colors(3), GWh$total)
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude,
lng = GWh$Longitude,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
runApp()
runApp()
states <- read.csv("statelatlong.csv",
header = TRUE,
stringsAsFactors = FALSE )
View(states)
View(states)
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude,
lng = GWh$Longitude,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
runApp()
View(annual_generation)
View(GWh)
View(states)
states <- states %>%
rename(
State = City,
Abbrev = State
)
View(states)
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp()
