#plo
# reshape the data potential
sumup_potential <- sum_potential %>%
spread(
sum_potential,
type,
generation
)
#plo
sumup_potential <- sum_potential %>%
spread(
sum_potential,
type,
generation
)
runApp()
runApp()
View(potential_data)
View(potential_data)
runApp('~/Desktop/info201/master')
runApp()
runApp('~/Desktop/info201/master')
runApp('~/Desktop/info201/master')
View(potential_data)
View(potential_data)
energy_sources <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
View(energy_sources)
runApp('~/Desktop/info201/master')
setwd("~/Desktop/info201/Info201_project")
runApp('~/Desktop/info201/master')
runApp('master')
runApp('master')
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
annual_generation <- read.csv("dataset/annual_generation_state.csv",
header = TRUE,
stringsAsFactors = FALSE)
runApp('master')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
states <- read.csv("statelatlong.csv")
View(states)
View(states)
runApp()
runApp()
View(potential_data)
View(potential_data)
potential_data <- potential_data %>%
rename(
X = City
)
View(states)
View(states)
potential_data <- potential_data %>%
rename(
X = City
)
potential_data <- potential_data %>%
rename(
X,  City
)
state
potential_data <- potential_data %>%
rename(
X,  City
)
potential_data <- potential_data %>%
rename(
state = City
)
potential_data <- potential_data %>%
rename(
State = X
)
View(potential_data)
View(potential_data)
runApp()
runApp()
View(GWh)
GWh <- GWh %>%
group_by(State) %>%
summarize(most_produced = max(total)) %>%
filter(most_produced == max(most_produced)) %>%
select(State)
GWh <- subset(potential_data, select = c("State", "urbanUtilityScalePV_GWh", "ruralUtilityScalePV_GWh",
"rooftopPV_GWh", "CSP_GWh", "onshoreWind_GWh", "offshoreWind_GWh",
"biopowerSolid_GWh", "biopowerGaseous_GWh", "geothermalHydrothermal_GWh",
"EGSGeothermal_GWh", "hydropower_GWh"))
GWh <- GWh %>%
inner_join(states, by = "State")
View(GWh)
View(GWh)
View(states)
View(states)
potential_data <- potential_data %>%
rename(
State = X
)
states <- states %>%
rename(
State = City,
Abbrev = State
)
GWh <- subset(potential_data, select = c("State", "urbanUtilityScalePV_GWh", "ruralUtilityScalePV_GWh",
"rooftopPV_GWh", "CSP_GWh", "onshoreWind_GWh", "offshoreWind_GWh",
"biopowerSolid_GWh", "biopowerGaseous_GWh", "geothermalHydrothermal_GWh",
"EGSGeothermal_GWh", "hydropower_GWh"))
GWh <- GWh %>%
inner_join(states, by = "State")
View(GWh)
View(GWh)
runApp()
interactive_map
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude.x,
lng = GWh$Longitude.x,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
library(shiny)
library(dplyr)
library(ggplot2)
library(data.table)
library(tidyr)
library(leaflet)
library(htmltools)
library(plotly)
GWh$info <- paste0("State: ", GWh$State, "<br/>",
"Total Energy Produced: ", GWh$total, "GWh", "<br/>")
map_coloring <- colorFactor(topo.colors(3), GWh$total)
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude.x,
lng = GWh$Longitude.x,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude.x,
lng = GWh$Longitude.x,
na.rm = TRUE,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude,
lng = GWh$Longitude,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
runApp()
GWh$total <- rowSums(GWh[, 2:12], na.rm = TRUE)
GWh$info <- paste0("State: ", GWh$State, "<br/>",
"Total Energy Produced: ", GWh$total, "GWh", "<br/>")
map_coloring <- colorFactor(topo.colors(3), GWh$total)
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude,
lng = GWh$Longitude,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
runApp()
runApp()
states <- read.csv("statelatlong.csv",
header = TRUE,
stringsAsFactors = FALSE )
View(states)
View(states)
interactive_map <- leaflet(data = GWh) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lat = GWh$Latitude,
lng = GWh$Longitude,
clusterOptions = markerClusterOptions(),
stroke = FALSE,
color = map_coloring(GWh$total),
label = ~lapply(info, HTML))
interactive_map
runApp()
View(annual_generation)
View(GWh)
View(states)
states <- states %>%
rename(
State = City,
Abbrev = State
)
View(states)
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp()
shiny::runApp()
setwd("~/Desktop/info201/Info201_project")
rsconnect::showLogs()
View(energy_sources)
View(energy_sources)
energy_sources_df <- energy_sources %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
View(energy_sources_df)
View(energy_sources_df)
setwd("~/Desktop/info201/Info201_project")
View(energy_sources_df)
potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
runApp()
runApp()
energy_df <- potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
View(energy_sources)
View(energy_sources)
potential_data <- potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
View(potential_data)
View(potential_data)
energy_df <- potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_df <- potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
View(potential_data)
potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
potential_data <- read.csv("united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
potential_data <- read.csv("united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(potential_data)
View(potential_data)
potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_df <- potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
View(energy_df)
View(energy_df)
getwd(energy_df)
getwd
getwd()
View(energy_df)
energy_df <- potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
write.csv(energy_df, "energy_df.csv")
runApp()
energy_sources_df <- potential_data %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
write.csv(energy_sources_df, "energy_sources_df.csv")
runApp()
energy <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
write.csv(energy_sources_df, "energy_sources_df.csv")
energy <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
write.csv(energy_sources_df, "energy_sources_df.csv")
potential_data <- read.csv("united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
annual_generation <- read.csv("annual_generation_state.csv",
header = TRUE,
stringsAsFactors = FALSE)
energy <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
write.csv(energy_sources_df, "energy_sources_df.csv")
runApp()
write.csv(energy_sources_df, "/Info201_project/energy_sources_df.csv")
write.csv(energy_sources_df, "energy_sources_df.csv")
View(energy_sources_df)
View(energy_sources_df)
setwd("~/Desktop/info201/Info201_project")
runApp()
runApp()
View(energy_sources_df)
View(energy_sources_df)
runApp()
energy <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(dplyr)
library(ggplot2)
library(data.table)
library(tidyr)
library(leaflet)
library(htmltools)
library(plotly)
potential_data <- read.csv("united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
annual_generation <- read.csv("annual_generation_state.csv",
header = TRUE,
stringsAsFactors = FALSE)
annual_generation$generation <- as.numeric(gsub(",", "", annual_generation$GENERATION..Megawatthours.))
# Define server logic required to draw a histogram
server <- function(input, output) {
#comparsion
output$my_id <- renderPlot({
all_current <- annual_generation %>%
filter(YEAR == "2018" &
ENERGY.SOURCE %in% c("Wind", "Hydroelectric Conventional", "Solar Thermal and Photovoltaic") )
all_potential <- potential_data %>%
select(onshoreWind_GWh, hydropower_GWh, EGSGeothermal_GWh)
#rename the column
setnames(all_potential, old=c("onshoreWind_GWh","hydropower_GWh", "EGSGeothermal_GWh"),
new=c("Wind", "Hydroelectric Conventional", "Solar Thermal and Photovoltaic"))
#sum potential across three energy resources
sum_potential <- all_potential %>%
summarize(sum_wind = sum(Wind, na.rm = TRUE),
sum_hydro = sum(`Hydroelectric Conventional`, na.rm = TRUE),
sum_solar = sum(`Solar Thermal and Photovoltaic`, na.rm = TRUE)) %>%
select(sum_wind, sum_hydro, sum_solar)
rownames(sum_potential)[rownames(sum_potential) == "1"] = "generation"
#sum current across three energy resources
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" | ENERGY.SOURCE == "Hydroelectric Conventional" |
ENERGY.SOURCE == "Solar Thermal and Photovoltaic") %>%
group_by(ENERGY.SOURCE) %>%
summarise(sum = sum(generation, na.rm = TRUE))
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum)
)
})
#potential
energy <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
output$energyPlot <- renderPlot({
data <- energy_sources_df %>% filter(X == input$state)
data %>%
ggplot(aes(x = type,
y = Gwh)) + geom_col()  + ggtitle("Energy Prodction by State")
})
}
#write.csv(energy_sources_df, "energy_sources_df.csv")
energy_sources_df <- energy %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
output$energyPlot <- renderPlot({
data <- energy_sources_df %>% filter(X == input$state)
data %>%
ggplot(aes(x = type,
y = Gwh)) + geom_col()  + ggtitle("Energy Prodction by State")
})
renderPlot({
data <- energy_sources_df %>% filter(X == input$state)
data %>%
ggplot(aes(x = type,
y = Gwh)) + geom_col()  + ggtitle("Energy Prodction by State")
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(potential_data)
View(potential_data)
runApp()
runApp()
setwd("~/Desktop/info201/Info201_project")
runApp()
energy_sources <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy_sources %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
output$energyPlot <- renderPlot({
data <- energy_sources_df %>% filter(X == input$state)
data %>%
ggplot(aes(x = type,
y = Gwh)) + geom_col()  + ggtitle("Energy Prodction by State")
})
runApp()
all_potential <- potential_data %>%
select(onshoreWind_GWh, hydropower_GWh, EGSGeothermal_GWh)
#rename the column
all_current <- annual_generation %>%
filter(YEAR == "2018" &
ENERGY.SOURCE %in% c("Wind", "Hydroelectric Conventional", "Solar Thermal and Photovoltaic") )
sum_potential <- all_potential %>%
summarize(sum_wind = sum(Wind, na.rm = TRUE),
sum_hydro = sum(`Hydroelectric Conventional`, na.rm = TRUE),
sum_solar = sum(`Solar Thermal and Photovoltaic`, na.rm = TRUE)) %>%
select(sum_wind, sum_hydro, sum_solar)
rownames(sum_potential)[rownames(sum_potential) == "1"] = "generation"
sum_current <- all_current %>%
filter(ENERGY.SOURCE == "Wind" | ENERGY.SOURCE == "Hydroelectric Conventional" |
ENERGY.SOURCE == "Solar Thermal and Photovoltaic") %>%
group_by(ENERGY.SOURCE) %>%
summarise(sum = sum(generation, na.rm = TRUE))
ggplot(sum_current) +
geom_col(
mapping = aes(x = ENERGY.SOURCE, y = sum)
)
})
energy_sources <- potential_data %>%
select(X, hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
energy_sources_df <- energy_sources %>%
gather(key = "type",
value = "Gwh",
hydropower_GWh, EGSGeothermal_GW, onshoreWind_GWh)
output$energyPlot <- renderPlot({
data <- energy_sources_df %>% filter(X == input$state)
data %>%
ggplot(aes(x = type,
y = Gwh)) + geom_col()  + ggtitle("Energy Prodction by State")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
