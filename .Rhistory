summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B"),
month = lubridate::dmy(paste(01, month))
) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = as.Date(paste(01, month), format = "%d %b-%y"), "%b"
) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(paste(01, month), format = "%d %b-%y"), "%b")
) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(paste(01, month), format = "%d %b-%y"), "%b")
) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(paste(01, month), format = "%d %b-%y"))
) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(paste(01, month), format = "%d %b-%y"))
) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B"))
View(shooting_df)
View(shooting_df)
shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B"))
shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B"))
View(shooting_df)
View(shooting_df)
month <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B"))
View(month)
View(month)
month <- factor(shooting_df$date)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
View(summary_table)
View(summary_table)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
mutate(smonth = factor(month, levels = month.name))
select(smonth, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
mutate(smonth = factor(month, levels = month.name)) %>%
select(smonth, sum_killed, sum_injured, sum_impacted)
View(shooting_df)
View(shooting_df)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
mutate(smonth = factor(month, levels = month.name)) %>%
select(smonth, sum_killed, sum_injured, sum_impacted)
View(summary_table)
View(summary_table)
colnames(smonth)
smonth
summary_table$smonth
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
mutate(smonth = factor(month, levels = month.name)) %>%
select(smonth, sum_killed, sum_injured, sum_impacted)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
mutate(smonth = factor(month, levels = month.name)) %>%
select(smonth, sum_killed, sum_injured, sum_impacted)
View(summary_table)
View(summary_table)
summary_table <- shooting_df %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
mutate(smonth = factor(month, levels = month.name, ordered = TRUE)) %>%
select(smonth, sum_killed, sum_injured, sum_impacted)
View(summary_table)
View(summary_table)
summary_table <- shooting_df %>%
mutate(month = factor(format(as.Date(date, format = "%B %d, %Y"), "%B"), levels = month.name,
ordered = TRUE)) %>%
group_by(month) %>%
summarise(sum_killed = sum(num_killed, na.rm = FALSE),
sum_impacted = sum(num_impacted, na.rm = FALSE),
sum_injured = sum(num_injured, na.rm = FALSE)) %>%
# mutate(smonth = factor(month, levels = month.name, ordered = TRUE)) %>%
select(month, sum_killed, sum_injured, sum_impacted)
View(summary_table)
View(summary_table)
knitr::opts_chunk$set(echo = TRUE)
library("knitr")
library("leaflet")
source("analysis.R")
kable(summary_table, col.names = c("Month", "Total number of people killed", "Total number of people injured", "Total number of people impacted"), caption = "Summary Table of the gun violence in 2018(United States)")
kable(summary_table, col.names = c("Month", "Total number of people killed", "Total number of people injured", "Total number of people impacted"), caption = "Summary Table of the gun violence in 2018(United States)")
leaflet(shooting_df) %>%
addTiles() %>%
addCircleMarkers(data = shooting_df, lng = ~long, lat = ~lat, radius = ~shooting_df$num_impacted,
popup = paste("City:", shooting_df$city, "<br>",
"Date:", shooting_df$date,"<br>",
"Number of people killed:", shooting_df$num_killed, "<br>"))
choice <- summary_table %>%
rename(Killed = sum_killed, Injured = sum_injured) %>%
select(month, Killed, Injured) %>%
gather(key = victims, value = Total_victims, -month)
table <- ggplot(choice) +
geom_col(
mapping = aes(x = month, y = Total_victims, fill = victims))
table + labs(title = "Total number of people impacted sorted by months",
x = "Months",
y = "Total number of people impacted",
fill = "People who are impacted")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
shiny::runApp('~/Desktop/info201/Class_Practice')
setwd("~/Desktop/info201/Info201_project")
potential_data <- read.csv("united-states-renewable-energy-technical-potential-1.csv", header = TRUE, stringsAsFactors = FALSE)
potential_data <- read.csv("united-states-renewable-energy-technical-potential-1.csv", header = TRUE, stringsAsFactors = FALSE)
potential_data <- read.csv("~/dataset/united-states-renewable-energy-technical-potential-1.csv", header = TRUE, stringsAsFactors = FALSE)
potential_data <- read.csv("~/dataset/united-states-renewable-energy-technical-potential-1.csv", header = TRUE, stringsAsFactors = FALSE)
potential_data <- read.csv("~/dataset/united-states-renewable-energy-technical-potential-1.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("~/Desktop/info201/Info201_project")
potential_data <- read.csv("~/dataset/united-states-renewable-energy-technical-potential-1.csv", header = TRUE, stringsAsFactors = FALSE)
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv", header = TRUE, stringsAsFactors = FALSE)
View(potential_data)
View(potential_data)
View(potential_data)
View(potential_data)
install.packages("readxl")
install.packages("readxl")
library("readxl")
install.packages("readxl")
library("readxl")
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
annual_generation <- read_excel("dataset/annual_generation_state.xls")
install.packages("readxl")
View(annual_generation)
View(annual_generation)
View(annual_generation)
View(annual_generation)
View(annual_generation)
View(annual_generation)
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(potential_data)
View(potential_data)
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
stringsAsFactors = FALSE, header = TRUE)
View(potential_data)
View(potential_data)
annual_generation <- read_excel("dataset/annual_generation_state.xls", header = FALSE)
install.packages("readxl")
library("readxl")
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
stringsAsFactors = FALSE, header = TRUE)
annual_generation <- read_excel("dataset/annual_generation_state.xls", header = FALSE)
library("readxl")
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
stringsAsFactors = FALSE, header = TRUE)
annual_generation <- read_excel("dataset/annual_generation_state.xls", header = TRUE)
library("readxl")
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
stringsAsFactors = FALSE, header = TRUE)
annual_generation <- read_excel("dataset/annual_generation_state.xls", col_names = TRUE)
View(annual_generation)
View(annual_generation)
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
stringsAsFactors = FALSE, header = TRUE)
annual_generation <- read.csv("dataset/annual_generation_state.csv", header = TRUE, stringsAsFactors = FALSE)
View(annual_generation)
View(annual_generation)
potential_data <- read.csv("dataset/united-states-renewable-energy-technical-potential-1.csv",
stringsAsFactors = FALSE, header = TRUE)
annual_generation <- read.csv("dataset/annual_generation_state.csv", header = TRUE, stringsAsFactors = FALSE)
View(annual_generation)
View(annual_generation)
View(annual_generation)
View(annual_generation)
df_t <- read.csv("./data/natural-amenity-simplified.csv",
header = TRUE,
stringsAsFactors = FALSE
)
create_state_census_division_df <- function() {
# Read the file
df_t <- read.csv("./data/natural-amenity-simplified.csv",
header = TRUE,
stringsAsFactors = FALSE
)
# example01.R
#-----------------------------------------------------------------------------
# Demonstrates using dylpr to join data frames
#-----------------------------------------------------------------------------
library("dplyr")
#-----------------------------------------------------------------------------
# Data Wrangle: Read data file and select two columns and rename them to
#   state_code
#   state_division_id
# And revmove all duplicates
# This function reduces about 3,500 rows to 50 rows (one for each state)
#-----------------------------------------------------------------------------
create_state_census_division_df <- function() {
# Read the file
df_t <- read.csv("./data/natural-amenity-simplified.csv",
header = TRUE,
stringsAsFactors = FALSE
)
# Data wrangling
df <- df_t %>%
select(    state_code = "STATE",
census_division_id = "Census.Division") %>%
distinct()
# Check if things seem to be correct
if (nrow(df) != 50 ) {
stop("Should be 50 rows - one for each state")
}
# View(df_t)
# View(df)
# Write the file
write.csv(df,"./data/state_census_division.csv", row.names=FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Creates a data frame that maps census_division_id a human readable name
# data frame
#    census_division_id  integer  [1 .. 9]
#    division_name       character
#
# Question: Are there 50 rows in this data frame? Why or why not?
#-----------------------------------------------------------------------------
create_state_census_division_name_df <- function() {
df <- read.csv(textConnection("
census_division_id,division_name
1,New England
2,Middle Atlantic
3,East  North Central
4,West North Central
5,South Atlantic
6,East South Central
7,West South Central
8,Mountain
9,Pacific
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_name     character
#    state_abbrev   character
#    state_code     character   [Length: 2]
#-----------------------------------------------------------------------------
create_state_name_info_df <- function() {
df <- read.csv(textConnection("
state_name,state_abbrev,state_code
Alabama,Ala.,AL
Alaska,Alaska,AK
Arizona,Ariz.,AZ
Arkansas,Ark.,AR
California,Calif.,CA
Colorado,Colo.,CO
Connecticut,Conn.,CT
Delaware,Del.,DE
District of Columbia,D.C.,DC
Florida,Fla.,FL
Georgia,Ga.,GA
Hawaii,Hawaii,HI
Idaho,Idaho,ID
Illinois,Ill.,IL
Indiana,Ind.,IN
Iowa,Iowa,IA
Kansas,Kans.,KS
Kentucky,Ky.,KY
Louisiana,La.,LA
Maine,Maine,ME
Maryland,Md.,MD
Massachusetts,Mass.,MA
Michigan,Mich.,MI
Minnesota,Minn.,MN
Mississippi,Miss.,MS
Missouri,Mo.,MO
Montana,Mont.,MT
Nebraska,Nebr.,NE
Nevada,Nev.,NV
New Hampshire,N.H.,NH
New ersey,N.J.,NJ
New Mexico,N.M.,NM
New York,N.Y.,NY
North Carolina,N.C.,NC
North Dakota,N.D.,ND
Ohio,Ohio,OH
Oklahoma,Okla.,OK
Oregon,Ore.,OR
Pennsylvania,Pa.,PA
Rhode Island,R.I.,RI
South Carolina,S.C.,SC
South Dakota,S.D.,SD
Tennessee,Tenn.,TN
Texas,Tex.,TX
Utah,Utah,UT
Vermont,Vt.,VT
Virginia,Va.,VA
Washington,Wash.,WA
West Virginia,W.Va.,WV
Wisconsin,Wis.,WI
Wyoming,Wyo.,WY
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_code            character   [Length: 2]
#    census_division_id    integer     [1 .. 8]
#
# Note: This data comes from: create_state_census_division_df()
#-----------------------------------------------------------------------------
create_state_code_census_division_df <- function() {
df <- read.csv(textConnection(
"state_code,census_division_id
AL,6
AZ,8
AR,7
CA,9
CO,8
CT,1
DE,5
DC,5
FL,5
GA,5
ID,8
IL,3
IN,3
IA,4
KS,4
KY,6
LA,7
ME,1
MD,5
MA,1
MI,3
MN,4
MS,6
MO,4
MT,8
NE,4
NV,8
NH,1
NJ,2
NM,8
NY,2
NC,5
ND,4
OH,3
OK,7
OR,9
PA,2
RI,1
SC,5
SD,4
TN,6
TX,7
UT,8
VT,1
VA,5
WA,9
WV,5
WI,3
WI,4
WY,8
"),
stringsAsFactors = FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Task #1: Write a function that returns the following data frame:
#    state_code
#    state_abbrev
#    state_name
#    state_census_id
#    state_census_name
#
# This will require that you combine data from two data frames. Use the dplyr
# join functions.
#
# See: ?join()
#-----------------------------------------------------------------------------
create_state_info_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Task #2: How many states are in each of the census divisions? Show the IDs and
# the names.
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Task #3: What is the following expression TRUE?  This this a problem? If so, what
# should be done?
#-----------------------------------------------------------------------------
if (nrow(create_state_census_division_df()) != nrow(create_state_name_info_df())) {
print ("Number of records in state_census_division and state_name_info data frames are different!")
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
View(df2)
setwd("~/Desktop/info201/dplyr-joins")
# example01.R
#-----------------------------------------------------------------------------
# Demonstrates using dylpr to join data frames
#-----------------------------------------------------------------------------
library("dplyr")
View(data)
create_state_census_division_df
View(create_state)
?join()
?join
View(potential_data)
View(potential_data)
View(potential_data)
View(potential_data)
View(potential_data)
View(potential_data)
View(potential_data)
